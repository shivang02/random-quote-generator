{"version":3,"sources":["components/QuoteBox.js","App.js","serviceWorker.js","index.js"],"names":["QuoteBox","className","id","this","props","myQuote","text","author","href","target","onClick","tweetMe","title","icon","faTwitterSquare","newQuote","Component","App","GenerateNewQuote","setState","quote","state","allQuotes","Math","floor","random","error","isLoading","TweetCode","document","getElementById","encodeURIComponent","fetch","then","res","json","data","console","log","catch","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"4TAuCeA,E,uKAhCH,OAEI,yBAAKC,UAAU,aAEX,yBAAKA,UAAU,aAAaC,GAAG,QAC3B,4BACKC,KAAKC,MAAMC,QAAQC,OAI5B,yBAAKL,UAAU,SAASC,GAAG,UACvB,2BACKC,KAAKC,MAAMC,QAAQE,SAI5B,yBAAKN,UAAU,cAEX,yBAAKA,UAAU,qBACX,uBAAGO,KAAK,GAAGN,GAAG,cAAcO,OAAO,SAASR,UAAU,gBAAgBS,QAASP,KAAKC,MAAMO,QAASC,MAAM,oBACrG,kBAAC,IAAD,CAAiBC,KAAMC,IAAiBZ,GAAG,mBAInD,yBAAKD,UAAU,wBACX,4BAAQS,QAASP,KAAKC,MAAMW,SAAUH,MAAM,uBAAuBV,GAAG,aAAtE,oB,GA5BLc,aC4DRC,E,kDA3Db,WAAYb,GAAQ,IAAD,8BACjB,cAAMA,IA4BRc,iBAAmB,WACjB,EAAKC,SAAS,CACZC,MAAO,EAAKC,MAAMC,UAAUC,KAAKC,MAAsB,IAAhBD,KAAKE,WAC5CC,MAAO,KACPC,WAAW,KAjCI,EAqCnBC,UAAW,WACTC,SAASC,eAAe,eAAetB,KAAvC,gDAAsFuB,mBAAmB,IAAM,EAAKV,MAAMD,MAAMd,KAAO,KAAO,EAAKe,MAAMD,MAAMb,UAnC7J,EAAKc,MAAQ,CACXC,UAAW,GACXF,MAAO,GACPO,WAAW,EACXD,MAAO,MAPM,E,gEAWE,IAAD,OAClBM,MAAM,+BACHC,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UAChBF,MAAM,SAAAG,GACLC,QAAQC,IAAI,YAAa,CAACF,IAC1B,EAAKjB,SAAS,CACZG,UAAWc,EACXhB,MAAOgB,EAAKb,KAAKC,MAAsB,IAAhBD,KAAKE,WAC5BE,WAAW,EACXD,MAAO,UAGVa,OAAM,SAAAb,GACL,EAAKP,SAAS,CAAEO,MAAOA,IACvBW,QAAQC,IAAIZ,Q,+BAiBhB,OAAGvB,KAAKkB,MAAMM,UAEV,yBAAK1B,UAAU,OACb,kBAAC,EAAD,CAAUI,QAAS,CAACC,KAAK,UAAWC,OAAO,WAAYQ,SAAU,KAAMJ,QAAS,QAMlF,yBAAKV,UAAU,OACb,kBAAC,EAAD,CAAUI,QAASF,KAAKkB,MAAMD,MAAOL,SAAUZ,KAAKe,iBAAkBP,QAASR,KAAKyB,iB,GArD5EZ,aCQEwB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFlB,SAASC,eAAe,SDyHpB,kBAAmBkB,WACrBA,UAAUC,cAAcC,MACrBjB,MAAK,SAAAkB,GACJA,EAAaC,gBAEdb,OAAM,SAAAb,GACLW,QAAQX,MAAMA,EAAM2B,c","file":"static/js/main.f794489d.chunk.js","sourcesContent":["import React, { Component } from 'react'\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\nimport {faTwitterSquare} from '@fortawesome/free-brands-svg-icons'\r\n\r\nclass QuoteBox extends Component {\r\n\r\n    render() { \r\n            return (\r\n                /*The outer box */\r\n                <div className=\"quote-box\">\r\n                {/*The quote*/}\r\n                    <div className=\"main-quote\" id=\"text\">\r\n                        <h1>\r\n                            {this.props.myQuote.text}\r\n                        </h1>\r\n                    </div>\r\n                {/*The author of the quote*/}\r\n                    <div className=\"author\" id=\"author\">\r\n                        <p>\r\n                            {this.props.myQuote.author}\r\n                        </p>\r\n                    </div>\r\n\r\n                    <div className=\"button-box\">\r\n                        {/*Tweet button*/}\r\n                        <div className=\"social-button-box\">\r\n                            <a href=\"\" id=\"tweet-quote\" target=\"_blank\" className=\"social-button\" onClick={this.props.tweetMe} title=\"Post on Twitter!\">\r\n                                <FontAwesomeIcon icon={faTwitterSquare} id=\"twitter-icon\"/>\r\n                            </a>\r\n                        </div>\r\n                        {/*New quote button*/}\r\n                        <div className=\"new-quote-button-box\">\r\n                            <button onClick={this.props.newQuote} title=\"Generate a new quote\" id=\"new-quote\">New Quote</button>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n        )}\r\n    }\r\n\r\nexport default QuoteBox\r\n","import React, { Component } from 'react';\nimport './App.css';\nimport QuoteBox from './components/QuoteBox';\n\nclass App extends Component {\n  constructor(props) {\n    super(props)\n\n      this.state = {\n        allQuotes: [],\n        quote: {},\n        isLoading: true,\n        error: null\n      }\n  }\n\n  componentDidMount() {\n    fetch('https://type.fit/api/quotes')\n      .then(res => res.json())\n      .then( data => {\n        console.log('your data', [data]);\n        this.setState({\n          allQuotes: data,\n          quote: data[Math.floor(Math.random() * 100)],\n          isLoading: false,\n          error: null\n        })\n      })\n      .catch(error => {\n        this.setState({ error: error })\n        console.log(error)\n      })\n  }\n\n  GenerateNewQuote = () => {\n    this.setState({\n      quote: this.state.allQuotes[Math.floor(Math.random() * 100)],\n      error: null,\n      isLoading: false\n    })\n  }\n\n  TweetCode =() => {\n    document.getElementById(\"tweet-quote\").href =`https://twitter.com/intent/tweet?text=${encodeURIComponent('\"' + this.state.quote.text + '\" ' + this.state.quote.author)}`;\n  }\n\n  render () {\n    if(this.state.isLoading) {\n      return (\n        <div className=\"App\">\n          <QuoteBox myQuote={{text:\"Loading\", author:\"Loading\"}} newQuote={null} tweetMe={null} />\n        </div>\n      )\n    }\n    else {\n      return (\n        <div className=\"App\">\n          <QuoteBox myQuote={this.state.quote} newQuote={this.GenerateNewQuote} tweetMe={this.TweetCode}/>\n        </div>\n      );\n    }\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}